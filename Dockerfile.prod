# Use a lighter base image (Alpine)
FROM php:8.2-fpm-alpine

# Add Alpine repositories if needed
RUN echo "http://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories && \
    echo "http://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories

# Install necessary system dependencies, SQLite extension, Composer, and Node.js
RUN apk update && apk add --no-cache \
    libsqlite3-dev \
    unzip \
    git \
    curl \
    nginx \
    bash \
    nodejs \
    npm \
    && docker-php-ext-install pdo_sqlite \
    && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \
    && npm install -g npm@latest \
    && rm -rf /var/cache/apk/*  # Clean up APK cache to reduce image size

# Set working directory
WORKDIR /var/www/html

# Copy only the necessary files (use a .dockerignore to exclude files like node_modules, vendor, etc.)
COPY . .

# Install PHP dependencies
RUN composer install --no-interaction --optimize-autoloader --no-dev --no-scripts --ignore-platform-reqs

# Install Node.js dependencies and build assets
RUN npm ci && npm run build

# Set permissions for Laravel storage and cache directories
RUN chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache

# Configure Nginx (ensure nginx config file is optimized and minimal)
COPY ./nginx/laravel.conf /etc/nginx/sites-available/default
RUN mkdir -p /var/www/html/storage && \
    chown -R www-data:www-data /var/www/html/storage

# Expose ports for the web server
EXPOSE 8080

# Command to create SQLite database if it doesn't exist, run migrations, and start the server
CMD bash -c "if [ ! -f /var/www/html/database/database.sqlite ]; then \
               touch /var/www/html/database/database.sqlite; \
               fi && \
               php artisan migrate --force && \
               php artisan db:seed --force && \
               php artisan serve --host=0.0.0.0 --port=8080"